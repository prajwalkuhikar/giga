# File: src/megapose/panda3d_renderer/types.py

from panda3d.core import FrameBufferProperties, GraphicsPipe, GraphicsOutput

@dataclass
class Panda3dCamera:
    node_path: p3d.core.Camera
    display_region: p3d.core.DisplayRegion
    window_properties: p3d.core.WindowProperties
    graphics_buffer: p3d.core.GraphicsOutput
    resolution: Resolution
    texture: p3d.core.Texture
    depth_texture: p3d.core.Texture

    @staticmethod
    def create(
        name: str,
        resolution: Resolution,
        app: Optional[ShowBase] = None,
    ) -> "Panda3dCamera":
        if app is None:
            app = base  # type: ignore # noqa: F821

        window_props = p3d.core.WindowProperties()
        window_props.setSize(resolution[0], resolution[1])

        fb_props = FrameBufferProperties()
        fb_props.set_depth_bits(24)
        fb_props.set_color_bits(24)  # Use 24 bits for color
        fb_props.set_alpha_bits(8)
        fb_props.set_multisamples(0)  # Disable multisampling

        graphics_buffer = app.graphicsEngine.make_output(
            app.pipe,
            f"Graphics Buffer [{name}]",
            -2,
            fb_props,
            window_props,
            GraphicsPipe.BFRefuseWindow,
            app.win.get_gsg(),
            app.win,
        )

        if graphics_buffer is None:
            raise RuntimeError("Unable to create graphics buffer")

        texture = p3d.core.Texture()
        graphics_buffer.addRenderTexture(
            texture,
            p3d.core.GraphicsOutput.RTMCopyRam,
        )

        depth_texture = p3d.core.Texture()
        depth_texture.setFormat(p3d.core.Texture.FDepthComponent)
        graphics_buffer.addRenderTexture(
            depth_texture,
            p3d.core.GraphicsOutput.RTMCopyRam,
            p3d.core.GraphicsOutput.RTPDepth,
        )

        cam_node = p3d.core.Camera(f"Camera [{name}]")
        lens = p3d.core.MatrixLens()
        cam_node.setLens(lens)

        cam_node_path = app.camera.attachNewNode(cam_node)
        cam_node_path.reparentTo(app.render)

        display_region = graphics_buffer.make_display_region(0, 1, 0, 1)
        display_region.set_sort(0)
        display_region.set_camera(cam_node_path)

        return Panda3dCamera(
            node_path=cam_node_path,
            display_region=display_region,
            window_properties=window_props,
            graphics_buffer=graphics_buffer,
            resolution=resolution,
            texture=texture,
            depth_texture=depth_texture,
        )
