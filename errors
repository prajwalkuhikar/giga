def compute_normals(vertices, faces):
    # Function to compute normals if they are missing
    normals = np.zeros(vertices.shape, dtype=vertices.dtype)
    tris = vertices[faces]
    n = np.cross(tris[:, 1] - tris[:, 0], tris[:, 2] - tris[:, 0])
    n /= np.linalg.norm(n, axis=1)[:, np.newaxis]
    normals[faces[:, 0]] += n
    normals[faces[:, 1]] += n
    normals[faces[:, 2]] += n
    normals /= np.linalg.norm(normals, axis=1)[:, np.newaxis]
    return normals

# Within the add_object method:
model = inout.load_ply(model_path)

# Check if normals are present
if 'normals' not in model:
    print(f"Normals not found in the model {model_path}. Computing normals...")
    model['normals'] = compute_normals(model['pts'], model['faces'])
